#!/usr/bin/env python3
"""
Cache class and count_calls decorator
"""

import redis
import uuid
from typing import Union, Callable, Optional
from functools import wraps

class Cache:
    """
    Cache class that interacts with Redis server.
    """
    def __init__(self) -> None:
        """
        Initialize the Cache class with a connection to the Redis server.
        """
        self._redis = redis.Redis(host='localhost', port=6379)
        self._redis.flushdb()

    def store(self, data: Union[str, bytes, int, float]) -> str:
        """
        Store the input data in Redis using a random key generated by uuid.

        Args:
            data: The data to be stored, can be a str, bytes, int or float.

        Returns:
            The generated key used to store the data in Redis.
        """
        key = str(uuid.uuid4())
        if not isinstance(data, bytes):
            data = str(data).encode()
        self._redis.set(key, data)
        return key

    def get(self, key: str, fn: Optional[Callable] = None) -> Union[str, bytes, int, float, None]:
        """
        Retrieve data from Redis using the provided key.

        Args:
            key: The key used to retrieve data from Redis.
            fn: An optional conversion function to be applied to the data.

        Returns:
            The retrieved data, optionally converted using the provided function,
            or None if the key does not exist.
        """
        data = self._redis.get(key)
        if data is None:
            return None
        if fn is not None:
            data = fn(data)
        return data

    def get_str(self, key: str) -> Union[str, None]:
        """
        Retrieve a string from Redis using the provided key.

        Args:
            key: The key used to retrieve the string from Redis.

        Returns:
            The retrieved string, or None if the key does not exist.
        """
        return self.get(key, fn=lambda d: d.decode("utf-8"))

    def get_int(self, key: str) -> Union[int, None]:
        """
        Retrieve an integer from Redis using the provided key.

        Args:
            key: The key used to retrieve the integer from Redis.

        Returns:
            The retrieved integer, or None if the key does not exist.
        """
        return self.get(key, fn=int)

def count_calls(method: Callable) -> Callable:
    """
    Decorator to count the number of times a method is called.

    Args:
        method: The method to be decorated.

    Returns:
        The wrapped method that increments the call count and executes the original method.
    """
    @wraps(method)
    def wrapped_method(self, *args, **kwargs):
        key = method.__qualname__
        self._redis.incr(key)
        return method(self, *args, **kwargs)

    return wrapped_method	
